package com.mybookshelf.mybookshelf_backend.config;

// IMPORTS: Librer√≠as necesarias para configurar Spring Security
import org.springframework.context.annotation.Bean;           // Para crear beans de Spring
import org.springframework.context.annotation.Configuration;  // Marca esta clase como configuraci√≥n
import org.springframework.http.HttpMethod;                   // Para especificar m√©todos HTTP
import org.springframework.security.config.annotation.web.builders.HttpSecurity; // Para configurar seguridad HTTP
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; // Habilita Spring Security
import org.springframework.security.web.SecurityFilterChain; // Cadena de filtros de seguridad

/**
 * CLASE SecurityConfig - Configuraci√≥n de Seguridad ACTUALIZADA
 *
 * ¬øQu√© es Spring Security?
 * - Framework de seguridad para aplicaciones Spring
 * - Maneja autenticaci√≥n (qui√©n eres) y autorizaci√≥n (qu√© puedes hacer)
 * - Por defecto, protege TODAS las URLs de la aplicaci√≥n
 *
 * ¬øPor qu√© necesitamos esta configuraci√≥n?
 * - H2 Console necesita acceso sin restricciones durante desarrollo
 * - APIs REST necesitan acceso libre para testing y desarrollo
 * - Swagger UI necesita acceso para documentaci√≥n interactiva ‚Üê NUEVO
 * - Exception handling necesita funcionar sin autenticaci√≥n
 *
 * CONFIGURACI√ìN ACTUALIZADA: Development + Portfolio friendly
 * - APIs completamente abiertas para facilitar testing
 * - H2 Console accesible para debugging
 * - Swagger UI accesible para documentaci√≥n profesional ‚Üê NUEVO
 * - Preparado para demos y presentaciones de portfolio
 */

@Configuration  // Le dice a Spring que esta clase contiene configuraci√≥n
@EnableWebSecurity  // Habilita las funcionalidades de Spring Security en la aplicaci√≥n
public class SecurityConfig {

    /**
     * M√âTODO filterChain - Configura la cadena de filtros de seguridad
     *
     * ACTUALIZADO: Incluye soporte completo para Swagger/OpenAPI
     *
     * ¬øQu√© es un SecurityFilterChain?
     * - Serie de filtros que procesan las peticiones HTTP
     * - Cada filtro verifica diferentes aspectos de seguridad
     * - Se ejecutan en orden antes de llegar al controlador
     *
     * @Bean - Indica que Spring debe gestionar este objeto
     * HttpSecurity - Objeto para configurar seguridad HTTP
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

        http
                // ========================================
                // CONFIGURACI√ìN CSRF (Cross-Site Request Forgery)
                // ========================================

                /**
                 * CSRF Protection - Protecci√≥n contra ataques de falsificaci√≥n de peticiones
                 *
                 * ¬øQu√© es CSRF?
                 * - Ataque donde un sitio malicioso hace peticiones a tu aplicaci√≥n
                 * - Spring Security incluye tokens CSRF para prevenir esto
                 *
                 * ¬øPor qu√© lo deshabilitamos?
                 * - APIs REST no necesitan CSRF (se usa para formularios web tradicionales)
                 * - H2 Console no maneja tokens CSRF correctamente
                 * - Swagger UI necesita hacer peticiones sin tokens CSRF ‚Üê NUEVO
                 * - Facilita testing con Postman, curl, etc.
                 *
                 * .csrf(csrf -> csrf.disable()) - Sintaxis moderna de Spring Security 6+
                 */
                .csrf(csrf -> csrf.disable())

                // ========================================
                // CONFIGURACI√ìN DE AUTORIZACI√ìN ACTUALIZADA
                // ========================================

                /**
                 * Authorization Rules - Reglas de autorizaci√≥n por URL
                 *
                 * authorizeHttpRequests - Configura qu√© URLs requieren autenticaci√≥n
                 *
                 * ORDEN IMPORTANTE: las reglas m√°s espec√≠ficas van primero
                 *
                 * üÜï SWAGGER/OPENAPI ENDPOINTS:
                 * .requestMatchers("/swagger-ui/**").permitAll()
                 * - Permite acceso libre a la interfaz web de Swagger
                 * - URL: http://localhost:8080/swagger-ui/index.html
                 * - Esencial para documentaci√≥n interactiva
                 *
                 * .requestMatchers("/v3/api-docs/**").permitAll()
                 * - Permite acceso libre a los endpoints de OpenAPI JSON
                 * - URL: http://localhost:8080/v3/api-docs
                 * - Swagger UI lee estos JSON para generar la documentaci√≥n
                 *
                 * .requestMatchers("/swagger-ui.html").permitAll()
                 * - URL alternativa de Swagger (algunas versiones)
                 * - Compatibilidad con diferentes configuraciones
                 *
                 * H2 CONSOLE:
                 * .requestMatchers("/h2-console/**").permitAll()
                 * - Permite acceso SIN autenticaci√≥n a H2 Console
                 * - /** significa "cualquier subcarpeta o archivo"
                 * - Esencial para debugging durante desarrollo
                 *
                 * API REST:
                 * .requestMatchers("/api/**").permitAll()
                 * - üî• CLAVE: Permite acceso libre a TODA tu API REST
                 * - Durante desarrollo/demo, no requiere autenticaci√≥n
                 * - Facilita testing inmediato de endpoints
                 * - Permite que Swagger UI ejecute peticiones
                 *
                 * RESTO DE APLICACI√ìN:
                 * .anyRequest().authenticated()
                 * - TODAS las dem√°s URLs requieren autenticaci√≥n
                 * - Si no est√°s logueado, Spring redirige a login
                 */
                .authorizeHttpRequests(auth -> auth
                        // üÜï SWAGGER/OPENAPI - Documentaci√≥n interactiva
                        .requestMatchers("/swagger-ui/**").permitAll()          // Swagger UI
                        .requestMatchers("/v3/api-docs/**").permitAll()         // OpenAPI JSON
                        .requestMatchers("/swagger-ui.html").permitAll()        // URL alternativa

                        // HERRAMIENTAS DE DESARROLLO
                        .requestMatchers("/h2-console/**").permitAll()          // H2 Console libre

                        // API REST - Tu aplicaci√≥n principal
                        .requestMatchers("/api/**").permitAll()                 // üî• API REST LIBRE

                        // RESTO DE LA APLICACI√ìN
                        .anyRequest().authenticated()                           // Resto protegido
                )

                // ========================================
                // CONFIGURACI√ìN DE HEADERS HTTP
                // ========================================

                /**
                 * Headers Configuration - Configuraci√≥n de cabeceras de seguridad
                 *
                 * ¬øQu√© son Frame Options?
                 * - Cabecera HTTP que controla si tu p√°gina puede mostrarse en un frame/iframe
                 * - Por seguridad, Spring Security incluye "X-Frame-Options: DENY"
                 * - Esto previene ataques de clickjacking
                 *
                 * ¬øPor qu√© deshabilitamos Frame Options?
                 * - H2 Console usa frames internamente para mostrar su interfaz
                 * - Swagger UI tambi√©n puede usar frames en algunos componentes ‚Üê NUEVO
                 * - Si no lo deshabilitamos, estas herramientas aparecen en blanco
                 *
                 * NOTA: frameOptions() est√° DEPRECADO desde Spring Security 6.1
                 * Usamos el nuevo m√©todo recomendado con lambda
                 *
                 * .frameOptions(frameOptions -> frameOptions.disable())
                 * - Sintaxis moderna para deshabilitar frame options
                 * - Reemplaza el antiguo .frameOptions().disable()
                 */
                .headers(headers -> headers
                        .frameOptions(frameOptions -> frameOptions.disable())
                );

        // Devolver la configuraci√≥n construida
        return http.build();
    }

    /**
     * NOTAS IMPORTANTES SOBRE ESTA CONFIGURACI√ìN ACTUALIZADA:
     *
     * 1. üÜï SWAGGER INTEGRATION:
     *    - Swagger UI completamente accesible sin autenticaci√≥n
     *    - OpenAPI endpoints liberados para documentaci√≥n autom√°tica
     *    - URLs de documentaci√≥n: /swagger-ui/index.html, /v3/api-docs
     *    - Perfecto para demos de portfolio y presentaciones
     *
     * 2. CONFIGURACI√ìN DE DESARROLLO:
     *    - APIs completamente abiertas para facilitar testing
     *    - H2 Console accesible para debugging
     *    - Swagger accesible para documentaci√≥n interactiva
     *    - Sin autenticaci√≥n requerida para herramientas de desarrollo
     *
     * 3. VENTAJAS ACTUALES:
     *    - Testing inmediato con Postman/curl/Swagger UI
     *    - Demo funcional sin complicaciones de autenticaci√≥n
     *    - Desarrollo √°gil sin obst√°culos de auth
     *    - Documentaci√≥n profesional con Swagger UI
     *    - Debugging f√°cil de base de datos con H2 Console
     *
     * 4. URLS LIBERADAS:
     *    - http://localhost:8080/api/** ‚Üí ‚úÖ API REST LIBRE
     *    - http://localhost:8080/swagger-ui/index.html ‚Üí ‚úÖ SWAGGER UI LIBRE
     *    - http://localhost:8080/v3/api-docs ‚Üí ‚úÖ OPENAPI JSON LIBRE
     *    - http://localhost:8080/h2-console ‚Üí ‚úÖ H2 CONSOLE LIBRE
     *    - http://localhost:8080/ ‚Üí ‚ùå Requiere login (otras p√°ginas)
     *
     * 5. PORTFOLIO VALUE:
     *    - Swagger UI proporciona documentaci√≥n profesional autom√°tica
     *    - F√°cil demostraci√≥n de capacidades API a recruiters
     *    - Testing interactivo sin herramientas externas
     *    - Aspecto profesional comparable a APIs comerciales
     *
     * 6. EVOLUCI√ìN FUTURA (Post-Portfolio):
     *    Esta configuraci√≥n es perfecta para desarrollo y demo.
     *    M√°s adelante se puede implementar:
     *    - JWT authentication para APIs protegidas
     *    - Roles y permisos granulares por endpoint
     *    - Rate limiting para prevenir abuso
     *    - API keys para consumidores externos
     *    - HTTPS obligatorio en producci√≥n
     *
     * 7. SEGURIDAD EN PRODUCCI√ìN:
     *    Cuando despliegues a producci√≥n, considera:
     *    - Restringir acceso a Swagger UI (solo desarrollo)
     *    - Implementar autenticaci√≥n robusta para APIs
     *    - Habilitar CSRF para formularios web
     *    - Usar base de datos real con credenciales seguras
     *    - HTTPS obligatorio y certificados SSL
     *    - Validaci√≥n de input estricta y rate limiting
     *
     * 8. TESTING & DEMO READY:
     *    - ‚úÖ Swagger UI funcionar√° inmediatamente
     *    - ‚úÖ Todos los endpoints documentados autom√°ticamente
     *    - ‚úÖ Testing directo desde navegador
     *    - ‚úÖ Professional API explorer para presentaciones
     */
}