package com.mybookshelf.mybookshelf_backend.config;

// IMPORTS: Librer√≠as necesarias para configurar Spring Security
import org.springframework.context.annotation.Bean;           // Para crear beans de Spring
import org.springframework.context.annotation.Configuration;  // Marca esta clase como configuraci√≥n
import org.springframework.http.HttpMethod;                   // Para especificar m√©todos HTTP
import org.springframework.security.config.annotation.web.builders.HttpSecurity; // Para configurar seguridad HTTP
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; // Habilita Spring Security
import org.springframework.security.web.SecurityFilterChain; // Cadena de filtros de seguridad

/**
 * CLASE SecurityConfig - Configuraci√≥n de Seguridad
 *
 * ¬øQu√© es Spring Security?
 * - Framework de seguridad para aplicaciones Spring
 * - Maneja autenticaci√≥n (qui√©n eres) y autorizaci√≥n (qu√© puedes hacer)
 * - Por defecto, protege TODAS las URLs de la aplicaci√≥n
 *
 * ¬øPor qu√© necesitamos esta configuraci√≥n?
 * - H2 Console necesita acceso sin restricciones durante desarrollo
 * - APIs REST necesitan acceso libre para testing y desarrollo
 * - Swagger UI necesita acceso para documentaci√≥n
 *
 * CONFIGURACI√ìN ACTUAL: Desarrollo/Demo friendly
 * - APIs completamente abiertas para facilitar testing
 * - H2 Console accesible para debugging
 * - Preparado para futuras mejoras de seguridad
 */

@Configuration  // Le dice a Spring que esta clase contiene configuraci√≥n
@EnableWebSecurity  // Habilita las funcionalidades de Spring Security en la aplicaci√≥n
public class SecurityConfig {

    /**
     * M√âTODO filterChain - Configura la cadena de filtros de seguridad
     *
     * ¬øQu√© es un SecurityFilterChain?
     * - Serie de filtros que procesan las peticiones HTTP
     * - Cada filtro verifica diferentes aspectos de seguridad
     * - Se ejecutan en orden antes de llegar al controlador
     *
     * @Bean - Indica que Spring debe gestionar este objeto
     * HttpSecurity - Objeto para configurar seguridad HTTP
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

        http
                // ========================================
                // CONFIGURACI√ìN CSRF (Cross-Site Request Forgery)
                // ========================================

                /**
                 * CSRF Protection - Protecci√≥n contra ataques de falsificaci√≥n de peticiones
                 *
                 * ¬øQu√© es CSRF?
                 * - Ataque donde un sitio malicioso hace peticiones a tu aplicaci√≥n
                 * - Spring Security incluye tokens CSRF para prevenir esto
                 *
                 * ¬øPor qu√© lo deshabilitamos?
                 * - APIs REST no necesitan CSRF (se usa para formularios web tradicionales)
                 * - H2 Console no maneja tokens CSRF correctamente
                 * - Facilita testing con Postman, curl, etc.
                 *
                 * .csrf(csrf -> csrf.disable()) - Sintaxis moderna de Spring Security 6+
                 */
                .csrf(csrf -> csrf.disable())

                // ========================================
                // CONFIGURACI√ìN DE AUTORIZACI√ìN
                // ========================================

                /**
                 * Authorization Rules - Reglas de autorizaci√≥n por URL
                 *
                 * authorizeHttpRequests - Configura qu√© URLs requieren autenticaci√≥n
                 *
                 * ORDEN IMPORTANTE: las reglas m√°s espec√≠ficas van primero
                 *
                 * .requestMatchers("/h2-console/**").permitAll()
                 * - Permite acceso SIN autenticaci√≥n a H2 Console
                 * - /** significa "cualquier subcarpeta o archivo"
                 * - Esencial para debugging durante desarrollo
                 *
                 * .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()
                 * - Permite acceso libre a documentaci√≥n Swagger
                 * - /swagger-ui/** = interfaz web de Swagger
                 * - /v3/api-docs/** = endpoints de OpenAPI JSON
                 *
                 * .requestMatchers("/api/**").permitAll()
                 * - üî• CLAVE: Permite acceso libre a TODA tu API REST
                 * - Durante desarrollo/demo, no requiere autenticaci√≥n
                 * - Facilita testing inmediato de endpoints
                 *
                 * .anyRequest().authenticated()
                 * - TODAS las dem√°s URLs requieren autenticaci√≥n
                 * - Si no est√°s logueado, Spring redirige a login
                 */
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/h2-console/**").permitAll()          // H2 Console libre
                        .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()  // Swagger libre
                        .requestMatchers("/api/**").permitAll()                 // üî• API REST LIBRE
                        .anyRequest().authenticated()                           // Resto protegido
                )

                // ========================================
                // CONFIGURACI√ìN DE HEADERS HTTP
                // ========================================

                /**
                 * Headers Configuration - Configuraci√≥n de cabeceras de seguridad
                 *
                 * ¬øQu√© son Frame Options?
                 * - Cabecera HTTP que controla si tu p√°gina puede mostrarse en un frame/iframe
                 * - Por seguridad, Spring Security incluye "X-Frame-Options: DENY"
                 * - Esto previene ataques de clickjacking
                 *
                 * ¬øPor qu√© deshabilitamos Frame Options?
                 * - H2 Console usa frames internamente para mostrar su interfaz
                 * - Si no lo deshabilitamos, H2 Console aparece en blanco
                 *
                 * NOTA: frameOptions() est√° DEPRECADO desde Spring Security 6.1
                 * Usamos el nuevo m√©todo recomendado con lambda
                 *
                 * .frameOptions(frameOptions -> frameOptions.disable())
                 * - Sintaxis moderna para deshabilitar frame options
                 * - Reemplaza el antiguo .frameOptions().disable()
                 */
                .headers(headers -> headers
                        .frameOptions(frameOptions -> frameOptions.disable())
                );

        // Devolver la configuraci√≥n construida
        return http.build();
    }

    /**
     * NOTAS IMPORTANTES SOBRE ESTA CONFIGURACI√ìN:
     *
     * 1. CONFIGURACI√ìN DE DESARROLLO:
     *    - APIs completamente abiertas para facilitar testing
     *    - H2 Console accesible para debugging
     *    - Swagger accesible para documentaci√≥n
     *    - Sin autenticaci√≥n requerida para /api/**
     *
     * 2. VENTAJAS ACTUALES:
     *    - Testing inmediato con Postman/curl
     *    - Demo funcional sin complicaciones
     *    - Desarrollo √°gil sin obst√°culos de auth
     *    - Debugging f√°cil de base de datos
     *
     * 3. URLS AFECTADAS:
     *    - http://localhost:8080/api/books ‚Üí ‚úÖ LIBRE
     *    - http://localhost:8080/api/authors ‚Üí ‚úÖ LIBRE
     *    - http://localhost:8080/h2-console ‚Üí ‚úÖ LIBRE
     *    - http://localhost:8080/swagger-ui ‚Üí ‚úÖ LIBRE
     *    - http://localhost:8080/ ‚Üí ‚ùå Requiere login
     *
     * 4. EVOLUCI√ìN FUTURA:
     *    Esta configuraci√≥n es perfecta para las fases actuales del proyecto.
     *    M√°s adelante podemos implementar:
     *    - JWT authentication para APIs
     *    - Roles y permisos granulares
     *    - Rate limiting
     *    - HTTPS obligatorio en producci√≥n
     *
     * 5. SEGURIDAD EN PRODUCCI√ìN:
     *    Cuando despliegues a producci√≥n, considera:
     *    - Habilitar CSRF para formularios web
     *    - Restringir frame options
     *    - Usar base de datos real (no H2)
     *    - Implementar autenticaci√≥n robusta
     *    - HTTPS obligatorio
     *    - Validaci√≥n de input estricta
     */
}